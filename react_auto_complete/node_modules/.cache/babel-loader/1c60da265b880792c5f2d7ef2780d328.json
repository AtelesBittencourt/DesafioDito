{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Ateles Junior\\\\Documents\\\\2018-2\\\\Dito\\\\autocomplete\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Ateles Junior\\\\Documents\\\\2018-2\\\\Dito\\\\autocomplete\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Ateles Junior\\\\Documents\\\\2018-2\\\\Dito\\\\autocomplete\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Ateles Junior\\\\Documents\\\\2018-2\\\\Dito\\\\autocomplete\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Ateles Junior\\\\Documents\\\\2018-2\\\\Dito\\\\autocomplete\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Ateles Junior\\\\Documents\\\\2018-2\\\\Dito\\\\autocomplete\\\\src\\\\autoComplete.js\";\nimport React, { Component, Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\n\nvar Autocomplete =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Autocomplete, _Component);\n\n  function Autocomplete(props) {\n    var _this;\n\n    _classCallCheck(this, Autocomplete);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Autocomplete).call(this, props));\n\n    _this.onChange = function (e) {\n      var suggestions = _this.props.suggestions;\n      var userInput = e.currentTarget.value; // Filter our suggestions that don't contain the user's input\n\n      var filteredSuggestions = suggestions.filter(function (suggestion) {\n        return suggestion.toLowerCase().indexOf(userInput.toLowerCase()) > -1;\n      }); // Update the user input and filtered suggestions, reset the active\n      // suggestion and make sure the suggestions are shown\n\n      _this.setState({\n        sugestao: 0,\n        filteredSuggestions: filteredSuggestions,\n        showSuggestions: true,\n        userInput: e.currentTarget.value\n      });\n    };\n\n    _this.onClick = function (e) {\n      // Update the user input and reset the rest of the state\n      _this.setState({\n        sugestao: 0,\n        filteredSuggestions: [],\n        showSuggestions: false,\n        userInput: e.currentTarget.innerText\n      });\n    };\n\n    _this.onKeyDown = function (e) {\n      var _this$state = _this.state,\n          activeSuggestion = _this$state.activeSuggestion,\n          filteredSuggestions = _this$state.filteredSuggestions; // User pressed the enter key, update the input and close the\n      // suggestions\n\n      if (e.keyCode === 13) {\n        _this.setState({\n          sugestao: 0,\n          showSuggestions: false,\n          userInput: filteredSuggestions[activeSuggestion]\n        });\n      } // User pressed the up arrow, decrement the index\n      else if (e.keyCode === 38) {\n          if (activeSuggestion === 0) {\n            return;\n          }\n\n          _this.setState({\n            sugestao: activeSuggestion - 1\n          });\n        } // User pressed the down arrow, increment the index\n        else if (e.keyCode === 40) {\n            if (activeSuggestion - 1 === filteredSuggestions.length) {\n              return;\n            }\n\n            _this.setState({\n              sugestao: activeSuggestion + 1\n            });\n          }\n    };\n\n    _this.state = {\n      sugestao: 0,\n      filteredSuggestions: [],\n      // Whether or not the suggestion list is shown\n      showSuggestions: false,\n      // What the user has entered\n      entrada: \"\"\n    };\n    return _this;\n  } // Event fired when the input value is changed\n\n\n  _createClass(Autocomplete, [{\n    key: \"render\",\n    value: function render() {\n      var onChange = this.onChange,\n          onClick = this.onClick,\n          onKeyDown = this.onKeyDown,\n          _this$state2 = this.state,\n          activeSuggestion = _this$state2.activeSuggestion,\n          filteredSuggestions = _this$state2.filteredSuggestions,\n          showSuggestions = _this$state2.showSuggestions,\n          entrada = _this$state2.entrada;\n      var suggestionsListComponent;\n\n      if (showSuggestions && entrada) {\n        if (filteredSuggestions.length) {\n          suggestionsListComponent = React.createElement(\"ul\", {\n            class: \"suggestions\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 108\n            },\n            __self: this\n          }, filteredSuggestions.map(function (suggestion, index) {\n            var className; // Flag the active suggestion with a class\n\n            if (index === activeSuggestion) {\n              className = \"suggestion-active\";\n            }\n\n            return React.createElement(\"li\", {\n              className: className,\n              key: suggestion,\n              onClick: onClick,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 118\n              },\n              __self: this\n            }, suggestion);\n          }));\n        } else {\n          suggestionsListComponent = React.createElement(\"div\", {\n            class: \"no-suggestions\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 131\n            },\n            __self: this\n          }, React.createElement(\"em\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 132\n            },\n            __self: this\n          }, \"No suggestions, you're on your own!\"));\n        }\n      }\n\n      return React.createElement(Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"text\",\n        onChange: onChange,\n        onKeyDown: onKeyDown,\n        value: entrada,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }), suggestionsListComponent);\n    }\n  }]);\n\n  return Autocomplete;\n}(Component);\n\nAutocomplete.propTypes = {\n  suggestions: PropTypes.instanceOf(Array)\n};\nAutocomplete.defaultProps = {\n  suggestions: []\n};\nexport default Autocomplete;","map":{"version":3,"sources":["C:\\Users\\Ateles Junior\\Documents\\2018-2\\Dito\\autocomplete\\src\\autoComplete.js"],"names":["React","Component","Fragment","PropTypes","Autocomplete","props","onChange","e","suggestions","userInput","currentTarget","value","filteredSuggestions","filter","suggestion","toLowerCase","indexOf","setState","sugestao","showSuggestions","onClick","innerText","onKeyDown","state","activeSuggestion","keyCode","length","entrada","suggestionsListComponent","map","index","className","propTypes","instanceOf","Array","defaultProps"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,YAAtB;;IAEMC,Y;;;;;AASF,wBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,sFAAMA,KAAN;;AADe,UAenBC,QAfmB,GAeR,UAAAC,CAAC,EAAI;AAAA,UACJC,WADI,GACY,MAAKH,KADjB,CACJG,WADI;AAEZ,UAAMC,SAAS,GAAGF,CAAC,CAACG,aAAF,CAAgBC,KAAlC,CAFY,CAIZ;;AACA,UAAMC,mBAAmB,GAAGJ,WAAW,CAACK,MAAZ,CAC5B,UAAAC,UAAU;AAAA,eACNA,UAAU,CAACC,WAAX,GAAyBC,OAAzB,CAAiCP,SAAS,CAACM,WAAV,EAAjC,IAA4D,CAAC,CADvD;AAAA,OADkB,CAA5B,CALY,CAUZ;AACA;;AACA,YAAKE,QAAL,CAAc;AACVC,QAAAA,QAAQ,EAAE,CADA;AAEVN,QAAAA,mBAAmB,EAAnBA,mBAFU;AAGVO,QAAAA,eAAe,EAAE,IAHP;AAIVV,QAAAA,SAAS,EAAEF,CAAC,CAACG,aAAF,CAAgBC;AAJjB,OAAd;AAMH,KAjCkB;;AAAA,UAoCnBS,OApCmB,GAoCT,UAAAb,CAAC,EAAI;AACX;AACA,YAAKU,QAAL,CAAc;AACVC,QAAAA,QAAQ,EAAE,CADA;AAEVN,QAAAA,mBAAmB,EAAE,EAFX;AAGVO,QAAAA,eAAe,EAAE,KAHP;AAIVV,QAAAA,SAAS,EAAEF,CAAC,CAACG,aAAF,CAAgBW;AAJjB,OAAd;AAMH,KA5CkB;;AAAA,UA+CnBC,SA/CmB,GA+CP,UAAAf,CAAC,EAAI;AAAA,wBACqC,MAAKgB,KAD1C;AAAA,UACLC,gBADK,eACLA,gBADK;AAAA,UACaZ,mBADb,eACaA,mBADb,EAGb;AACA;;AACA,UAAIL,CAAC,CAACkB,OAAF,KAAc,EAAlB,EAAsB;AACtB,cAAKR,QAAL,CAAc;AACVC,UAAAA,QAAQ,EAAE,CADA;AAEVC,UAAAA,eAAe,EAAE,KAFP;AAGVV,UAAAA,SAAS,EAAEG,mBAAmB,CAACY,gBAAD;AAHpB,SAAd;AAKC,OAND,CAOA;AAPA,WAQK,IAAIjB,CAAC,CAACkB,OAAF,KAAc,EAAlB,EAAsB;AAC3B,cAAID,gBAAgB,KAAK,CAAzB,EAA4B;AACxB;AACH;;AAED,gBAAKP,QAAL,CAAc;AAAEC,YAAAA,QAAQ,EAAEM,gBAAgB,GAAG;AAA/B,WAAd;AACC,SANI,CAOL;AAPK,aAQA,IAAIjB,CAAC,CAACkB,OAAF,KAAc,EAAlB,EAAsB;AAC3B,gBAAID,gBAAgB,GAAG,CAAnB,KAAyBZ,mBAAmB,CAACc,MAAjD,EAAyD;AACrD;AACH;;AAED,kBAAKT,QAAL,CAAc;AAAEC,cAAAA,QAAQ,EAAEM,gBAAgB,GAAG;AAA/B,aAAd;AACC;AACJ,KA3EkB;;AAGf,UAAKD,KAAL,GAAa;AACbL,MAAAA,QAAQ,EAAE,CADG;AAGbN,MAAAA,mBAAmB,EAAE,EAHR;AAIb;AACAO,MAAAA,eAAe,EAAE,KALJ;AAMb;AACAQ,MAAAA,OAAO,EAAE;AAPI,KAAb;AAHe;AAYlB,G,CAED;;;;;6BA+DS;AAAA,UAELrB,QAFK,GAWD,IAXC,CAELA,QAFK;AAAA,UAGLc,OAHK,GAWD,IAXC,CAGLA,OAHK;AAAA,UAILE,SAJK,GAWD,IAXC,CAILA,SAJK;AAAA,yBAWD,IAXC,CAKLC,KALK;AAAA,UAMDC,gBANC,gBAMDA,gBANC;AAAA,UAODZ,mBAPC,gBAODA,mBAPC;AAAA,UAQDO,eARC,gBAQDA,eARC;AAAA,UASDQ,OATC,gBASDA,OATC;AAaL,UAAIC,wBAAJ;;AAEA,UAAIT,eAAe,IAAIQ,OAAvB,EAAgC;AAChC,YAAIf,mBAAmB,CAACc,MAAxB,EAAgC;AAC5BE,UAAAA,wBAAwB,GACxB;AAAI,YAAA,KAAK,EAAC,aAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACKhB,mBAAmB,CAACiB,GAApB,CAAwB,UAACf,UAAD,EAAagB,KAAb,EAAuB;AAChD,gBAAIC,SAAJ,CADgD,CAGhD;;AACA,gBAAID,KAAK,KAAKN,gBAAd,EAAgC;AAC5BO,cAAAA,SAAS,GAAG,mBAAZ;AACH;;AAED,mBACI;AACA,cAAA,SAAS,EAAEA,SADX;AAEA,cAAA,GAAG,EAAEjB,UAFL;AAGA,cAAA,OAAO,EAAEM,OAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAKCN,UALD,CADJ;AASC,WAjBA,CADL,CADA;AAsBH,SAvBD,MAuBO;AACHc,UAAAA,wBAAwB,GACxB;AAAK,YAAA,KAAK,EAAC,gBAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mDADJ,CADA;AAKH;AACA;;AAED,aACA,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AACA,QAAA,IAAI,EAAC,MADL;AAEA,QAAA,QAAQ,EAAEtB,QAFV;AAGA,QAAA,SAAS,EAAEgB,SAHX;AAIA,QAAA,KAAK,EAAEK,OAJP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,EAOKC,wBAPL,CADA;AAWH;;;;EAjJsB3B,S;;AAArBG,Y,CACK4B,S,GAAY;AACfxB,EAAAA,WAAW,EAAEL,SAAS,CAAC8B,UAAV,CAAqBC,KAArB;AADE,C;AADjB9B,Y,CAKK+B,Y,GAAe;AAClB3B,EAAAA,WAAW,EAAE;AADK,C;AA+I1B,eAAeJ,YAAf","sourcesContent":["import React, { Component, Fragment } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass Autocomplete extends Component {\r\n    static propTypes = {\r\n        suggestions: PropTypes.instanceOf(Array)\r\n    };\r\n\r\n    static defaultProps = {\r\n        suggestions: []\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n        sugestao: 0,\r\n\r\n        filteredSuggestions: [],\r\n        // Whether or not the suggestion list is shown\r\n        showSuggestions: false,\r\n        // What the user has entered\r\n        entrada: \"\"\r\n        };\r\n    }\r\n\r\n    // Event fired when the input value is changed\r\n    onChange = e => {\r\n        const { suggestions } = this.props;\r\n        const userInput = e.currentTarget.value;\r\n\r\n        // Filter our suggestions that don't contain the user's input\r\n        const filteredSuggestions = suggestions.filter(\r\n        suggestion =>\r\n            suggestion.toLowerCase().indexOf(userInput.toLowerCase()) > -1\r\n        );\r\n\r\n        // Update the user input and filtered suggestions, reset the active\r\n        // suggestion and make sure the suggestions are shown\r\n        this.setState({\r\n            sugestao: 0,\r\n            filteredSuggestions,\r\n            showSuggestions: true,\r\n            userInput: e.currentTarget.value\r\n        });\r\n    };\r\n\r\n    // Event fired when the user clicks on a suggestion\r\n    onClick = e => {\r\n        // Update the user input and reset the rest of the state\r\n        this.setState({\r\n            sugestao: 0,\r\n            filteredSuggestions: [],\r\n            showSuggestions: false,\r\n            userInput: e.currentTarget.innerText\r\n        });\r\n    };\r\n\r\n    // Event fired when the user presses a key down\r\n    onKeyDown = e => {\r\n        const { activeSuggestion, filteredSuggestions } = this.state;\r\n\r\n        // User pressed the enter key, update the input and close the\r\n        // suggestions\r\n        if (e.keyCode === 13) {\r\n        this.setState({\r\n            sugestao: 0,\r\n            showSuggestions: false,\r\n            userInput: filteredSuggestions[activeSuggestion]\r\n        });\r\n        }\r\n        // User pressed the up arrow, decrement the index\r\n        else if (e.keyCode === 38) {\r\n        if (activeSuggestion === 0) {\r\n            return;\r\n        }\r\n\r\n        this.setState({ sugestao: activeSuggestion - 1 });\r\n        }\r\n        // User pressed the down arrow, increment the index\r\n        else if (e.keyCode === 40) {\r\n        if (activeSuggestion - 1 === filteredSuggestions.length) {\r\n            return;\r\n        }\r\n\r\n        this.setState({ sugestao: activeSuggestion + 1 });\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const {\r\n        onChange,\r\n        onClick,\r\n        onKeyDown,\r\n        state: {\r\n            activeSuggestion,\r\n            filteredSuggestions,\r\n            showSuggestions,\r\n            entrada\r\n        }\r\n        } = this;\r\n\r\n        let suggestionsListComponent;\r\n\r\n        if (showSuggestions && entrada) {\r\n        if (filteredSuggestions.length) {\r\n            suggestionsListComponent = (\r\n            <ul class=\"suggestions\">\r\n                {filteredSuggestions.map((suggestion, index) => {\r\n                let className;\r\n\r\n                // Flag the active suggestion with a class\r\n                if (index === activeSuggestion) {\r\n                    className = \"suggestion-active\";\r\n                }\r\n\r\n                return (\r\n                    <li\r\n                    className={className}\r\n                    key={suggestion}\r\n                    onClick={onClick}\r\n                    >\r\n                    {suggestion}\r\n                    </li>\r\n                );\r\n                })}\r\n            </ul>\r\n            );\r\n        } else {\r\n            suggestionsListComponent = (\r\n            <div class=\"no-suggestions\">\r\n                <em>No suggestions, you're on your own!</em>\r\n            </div>\r\n            );\r\n        }\r\n        }\r\n\r\n        return (\r\n        <Fragment>\r\n            <input\r\n            type=\"text\"\r\n            onChange={onChange}\r\n            onKeyDown={onKeyDown}\r\n            value={entrada}\r\n            />\r\n            {suggestionsListComponent}\r\n        </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Autocomplete;"]},"metadata":{},"sourceType":"module"}