{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Ateles Junior\\\\Documents\\\\2018-2\\\\Dito\\\\autocomplete\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Ateles Junior\\\\Documents\\\\2018-2\\\\Dito\\\\autocomplete\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Ateles Junior\\\\Documents\\\\2018-2\\\\Dito\\\\autocomplete\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Ateles Junior\\\\Documents\\\\2018-2\\\\Dito\\\\autocomplete\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Ateles Junior\\\\Documents\\\\2018-2\\\\Dito\\\\autocomplete\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Ateles Junior\\\\Documents\\\\2018-2\\\\Dito\\\\autocomplete\\\\src\\\\autoComplete.js\";\nimport React, { Component, Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\n\nvar Autocomplete =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Autocomplete, _Component);\n\n  function Autocomplete(props) {\n    var _this;\n\n    _classCallCheck(this, Autocomplete);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Autocomplete).call(this, props));\n\n    _this.onChange = function (e) {\n      var suggestions = _this.props.suggestions;\n      var userInput = e.currentTarget.value;\n      var filteredSuggestions = suggestions.filter(function (suggestion) {\n        return suggestion.toLowerCase().indexOf(userInput.toLowerCase()) > -1;\n      });\n\n      _this.setState({\n        activeSuggestion: 0,\n        filteredSuggestions: filteredSuggestions,\n        showSuggestions: e.currentTarget.value.length > 1 ? true : false,\n        userInput: e.currentTarget.value\n      });\n    };\n\n    _this.onClick = function (e) {\n      // Update the user input and reset the rest of the state\n      _this.setState({\n        activeSuggestion: 0,\n        filteredSuggestions: [],\n        showSuggestions: false,\n        userInput: e.currentTarget.innerText\n      });\n    };\n\n    _this.onKeyDown = function (e) {\n      var _this$state = _this.state,\n          activeSuggestion = _this$state.activeSuggestion,\n          filteredSuggestions = _this$state.filteredSuggestions; // User pressed the enter key, update the input and close the\n      // suggestions\n\n      if (e.keyCode === 13) {\n        _this.setState({\n          activeSuggestion: 0,\n          showSuggestions: false,\n          userInput: filteredSuggestions[activeSuggestion]\n        });\n      } // User pressed the up arrow, decrement the index\n      else if (e.keyCode === 38) {\n          if (activeSuggestion === 0) {\n            return;\n          }\n\n          _this.setState({\n            activeSuggestion: activeSuggestion - 1\n          });\n        } // User pressed the down arrow, increment the index\n        else if (e.keyCode === 40) {\n            if (activeSuggestion - 1 === filteredSuggestions.length) {\n              return;\n            }\n\n            _this.setState({\n              activeSuggestion: activeSuggestion + 1\n            });\n          }\n    };\n\n    _this.state = {\n      activeSuggestion: 0,\n      filteredSuggestions: [],\n      showSuggestions: false,\n      userInput: \"\"\n    };\n    return _this;\n  }\n\n  _createClass(Autocomplete, [{\n    key: \"render\",\n    value: function render() {\n      var onChange = this.onChange,\n          onClick = this.onClick,\n          onKeyDown = this.onKeyDown,\n          _this$state2 = this.state,\n          activeSuggestion = _this$state2.activeSuggestion,\n          filteredSuggestions = _this$state2.filteredSuggestions,\n          showSuggestions = _this$state2.showSuggestions,\n          userInput = _this$state2.userInput;\n      var suggestionsListComponent;\n\n      if (showSuggestions && userInput) {\n        if (filteredSuggestions.length) {\n          suggestionsListComponent = React.createElement(\"ul\", {\n            class: \"suggestions\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 101\n            },\n            __self: this\n          }, filteredSuggestions.map(function (suggestion, index) {\n            var className; // Flag the active suggestion with a class\n\n            if (index === activeSuggestion) {\n              className = \"suggestion-active\";\n            }\n\n            return React.createElement(\"li\", {\n              className: className,\n              key: suggestion,\n              onClick: onClick,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 111\n              },\n              __self: this\n            }, suggestion);\n          }));\n        } else {\n          suggestionsListComponent = React.createElement(\"div\", {\n            class: \"no-suggestions\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 124\n            },\n            __self: this\n          }, React.createElement(\"em\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 125\n            },\n            __self: this\n          }, \"No suggestions, you're on your own!\"));\n        }\n      }\n\n      return React.createElement(Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"text\",\n        onChange: onChange,\n        onKeyDown: onKeyDown,\n        value: userInput,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }), suggestionsListComponent);\n    }\n  }]);\n\n  return Autocomplete;\n}(Component);\n\nAutocomplete.propTypes = {\n  suggestions: PropTypes.instanceOf(Array)\n};\nAutocomplete.defaultProps = {\n  suggestions: []\n};\nexport default Autocomplete;","map":{"version":3,"sources":["C:\\Users\\Ateles Junior\\Documents\\2018-2\\Dito\\autocomplete\\src\\autoComplete.js"],"names":["React","Component","Fragment","PropTypes","Autocomplete","props","onChange","e","suggestions","userInput","currentTarget","value","filteredSuggestions","filter","suggestion","toLowerCase","indexOf","setState","activeSuggestion","showSuggestions","length","onClick","innerText","onKeyDown","state","keyCode","suggestionsListComponent","map","index","className","propTypes","instanceOf","Array","defaultProps"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass Autocomplete extends Component {\r\n  static propTypes = {\r\n    suggestions: PropTypes.instanceOf(Array)\r\n  };\r\n\r\n  static defaultProps = {\r\n    suggestions: []\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      activeSuggestion: 0,\r\n      filteredSuggestions: [],\r\n      showSuggestions: false,\r\n      userInput: \"\"\r\n    };\r\n  }\r\n\r\n  onChange = e => {\r\n    const { suggestions } = this.props;\r\n    const userInput = e.currentTarget.value;\r\n\r\n    const filteredSuggestions = suggestions.filter(\r\n      suggestion =>\r\n        suggestion.toLowerCase().indexOf(userInput.toLowerCase()) > -1\r\n    );\r\n\r\n    this.setState({\r\n      activeSuggestion: 0,\r\n      filteredSuggestions,\r\n      showSuggestions: e.currentTarget.value.length > 1 ? true : false,\r\n      userInput: e.currentTarget.value\r\n    });\r\n  };\r\n\r\n  // Event fired when the user clicks on a suggestion\r\n  onClick = e => {\r\n    // Update the user input and reset the rest of the state\r\n    this.setState({\r\n      activeSuggestion: 0,\r\n      filteredSuggestions: [],\r\n      showSuggestions: false,\r\n      userInput: e.currentTarget.innerText\r\n    });\r\n  };\r\n\r\n  // Event fired when the user presses a key down\r\n  onKeyDown = e => {\r\n    const { activeSuggestion, filteredSuggestions } = this.state;\r\n\r\n    // User pressed the enter key, update the input and close the\r\n    // suggestions\r\n    if (e.keyCode === 13) {\r\n      this.setState({\r\n        activeSuggestion: 0,\r\n        showSuggestions: false,\r\n        userInput: filteredSuggestions[activeSuggestion]\r\n      });\r\n    }\r\n    // User pressed the up arrow, decrement the index\r\n    else if (e.keyCode === 38) {\r\n      if (activeSuggestion === 0) {\r\n        return;\r\n      }\r\n\r\n      this.setState({ activeSuggestion: activeSuggestion - 1 });\r\n    }\r\n    // User pressed the down arrow, increment the index\r\n    else if (e.keyCode === 40) {\r\n      if (activeSuggestion - 1 === filteredSuggestions.length) {\r\n        return;\r\n      }\r\n\r\n      this.setState({ activeSuggestion: activeSuggestion + 1 });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      onChange,\r\n      onClick,\r\n      onKeyDown,\r\n      state: {\r\n        activeSuggestion,\r\n        filteredSuggestions,\r\n        showSuggestions,\r\n        userInput\r\n      }\r\n    } = this;\r\n\r\n    let suggestionsListComponent;\r\n\r\n    if (showSuggestions && userInput) {\r\n      if (filteredSuggestions.length) {\r\n        suggestionsListComponent = (\r\n          <ul class=\"suggestions\">\r\n            {filteredSuggestions.map((suggestion, index) => {\r\n              let className;\r\n\r\n              // Flag the active suggestion with a class\r\n              if (index === activeSuggestion) {\r\n                className = \"suggestion-active\";\r\n              }\r\n\r\n              return (\r\n                <li\r\n                  className={className}\r\n                  key={suggestion}\r\n                  onClick={onClick}\r\n                >\r\n                  {suggestion}\r\n                </li>\r\n              );\r\n            })}\r\n          </ul>\r\n        );\r\n      } else {\r\n        suggestionsListComponent = (\r\n          <div class=\"no-suggestions\">\r\n            <em>No suggestions, you're on your own!</em>\r\n          </div>\r\n        );\r\n      }\r\n    }\r\n\r\n    return (\r\n      <Fragment>\r\n        <input\r\n          type=\"text\"\r\n          onChange={onChange}\r\n          onKeyDown={onKeyDown}\r\n          value={userInput}\r\n        />\r\n        {suggestionsListComponent}\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Autocomplete;"]},"metadata":{},"sourceType":"module"}